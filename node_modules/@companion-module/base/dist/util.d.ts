/**
 * Assert a certain type for a literal.
 * This can be used to correctly type parts of an object in TypeScript.
 *
 * ### Example
 *  ```ts
 * {
 *  [ActionId.MyAction]: literal<CompanionActionDefinition>({
 *   name: 'My Action',
 *   // ...
 *  })
 * }
 * ```
 *
 * instead of this
 * ```ts
 * {
 *  [ActionId.MyAction]: {
 *   name: 'My Action',
 *   // ...
 *  }
 * }
 * ```
 */
export declare function literal<T>(v: T): T;
/** Type assert that a value is never */
export declare function assertNever(_val: never): void;
export interface RgbComponents {
    r: number;
    g: number;
    b: number;
}
/**
 * Combine separate RGB component to one single value to be used in feedback styles
 *
 * ### Example
 *
 * ```js
 * defaultStyle: {
 *  bgcolor: combineRgb(255, 0, 0),
 *  color: combineRgb(255, 255, 255),
 * }
 * ```
 */
export declare function combineRgb(r: number, g: number, b: number): number;
/**
 * Split a combined color value to separate RGB component values
 */
export declare function splitRgb(dec: number): RgbComponents;
/**
 * Make all optional properties be required and `| undefined`
 * This is useful to ensure that no property is missed, when manually converting between types, but allowing fields to be undefined
 */
export declare type Complete<T> = {
    [P in keyof Required<T>]: Pick<T, P> extends Required<Pick<T, P>> ? T[P] : T[P] | undefined;
};
//# sourceMappingURL=util.d.ts.map